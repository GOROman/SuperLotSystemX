// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ユーザー情報
model User {
  id           String    @id @default(uuid())
  twitterId    String    @unique // Twitter ID
  screenName   String    // Twitter スクリーンネーム
  profileImage String?   // プロフィール画像URL
  isFollower   Boolean   @default(false) // フォロワーかどうか
  followedAt   DateTime? // フォロー日時
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  entries      Entry[]   // 応募エントリーへの参照
  winners      Winner[]  // 当選情報への参照

  @@index([isFollower]) // フォロワー検索の最適化
}

// キャンペーンエントリー
model Entry {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  retweetId     String    // リツイートのID
  retweetedAt   DateTime  // リツイートした日時
  createdAt     DateTime  @default(now())
  isValid       Boolean   @default(true) // エントリーが有効かどうか
  invalidReason String?   // 無効な場合の理由

  @@unique([userId, retweetId]) // 重複エントリー防止
  @@index([isValid, createdAt]) // 有効なエントリーの検索最適化
}

// 当選情報
model Winner {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  giftCodeId  String    @unique
  giftCode    GiftCode  @relation(fields: [giftCodeId], references: [id])
  notifiedAt  DateTime? // 通知日時
  dmSentAt    DateTime? // DM送信日時
  dmMessageId String?   // DMのメッセージID
  createdAt   DateTime  @default(now())
  status      String    @default("PENDING") // 当選処理のステータス

  @@index([status]) // ステータスによる検索最適化
}

// ギフトコード
model GiftCode {
  id        String    @id @default(uuid())
  code      String    @unique // ギフトコード
  amount    Int       // 金額
  isUsed    Boolean   @default(false) // 使用済みかどうか
  createdAt DateTime  @default(now())
  usedAt    DateTime? // 使用日時
  note      String?   // メモ
  winner    Winner?   // 当選者への参照

  @@index([isUsed]) // 未使用コードの検索最適化
}

// システムログ
model SystemLog {
  id        String   @id @default(uuid())
  type      String   // ログタイプ
  message   String   // ログメッセージ
  metadata  Json?    // 追加のメタデータ
  createdAt DateTime @default(now())

  @@index([type, createdAt]) // ログの検索最適化

// ユーザー情報
model User {
  id            String    @id @default(cuid())
  twitterId     String    @unique // Twitter ID
  screenName    String    // Twitter スクリーンネーム
  profileImage  String?   // プロフィール画像URL
  isFollower    Boolean   @default(false) // フォロワーかどうか
  followedAt    DateTime? // フォロー日時
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entries       Entry[]   // 応募エントリーへの参照
  winners       Winner[]  // 当選情報への参照

  @@index([isFollower]) // フォロワー検索の最適化
}

// 応募エントリー
model Entry {
  id            String    @id @default(cuid())
  userId        String    // 応募者のID
  retweetId     String    // リツイートのID
  retweetedAt   DateTime  // リツイート日時
  createdAt     DateTime  @default(now())
  isValid       Boolean   @default(true) // 有効な応募かどうか
  invalidReason String?   // 無効な場合の理由
  user          User      @relation(fields: [userId], references: [id])
  
  @@unique([userId, retweetId]) // 同じユーザーによる同じツイートの重複応募を防ぐ
  @@index([isValid, createdAt]) // 抽選時の有効なエントリー検索の最適化
}

// 当選者情報
model Winner {
  id            String     @id @default(cuid())
  userId        String     // 当選者のID
  giftCodeId    String     @unique // ギフトコードのID
  notifiedAt    DateTime?  // 通知日時
  dmSentAt      DateTime?  // DM送信日時
  dmMessageId   String?    // 送信したDMのID
  createdAt     DateTime   @default(now())
  status        WinnerStatus @default(PENDING) // 当選ステータス
  user          User       @relation(fields: [userId], references: [id])
  giftCode      GiftCode   @relation(fields: [giftCodeId], references: [id])

  @@index([status]) // ステータス別の当選者検索の最適化
}

// 当選ステータス
enum WinnerStatus {
  PENDING   // 通知待ち
  NOTIFIED  // 通知済み
  SENT      // DM送信済み
  FAILED    // 送信失敗
}

// Amazonギフト券コード
model GiftCode {
  id            String    @id @default(cuid())
  code          String    @unique // ギフトコード（暗号化して保存）
  amount        Int       // ギフト券の金額（円）
  isUsed        Boolean   @default(false) // 使用済みかどうか
  createdAt     DateTime  @default(now())
  usedAt        DateTime? // 使用日時
  winner        Winner?   // 当選者情報への参照
  note          String?   // 備考

  @@index([isUsed]) // 未使用ギフトコード検索の最適化
}

// システムログ
model SystemLog {
  id            String    @id @default(cuid())
  type          LogType   // ログタイプ
  message       String    // ログメッセージ
  metadata      Json?     // 追加のメタデータ
  createdAt     DateTime  @default(now())

  @@index([type, createdAt]) // ログ検索の最適化
}

// ログタイプ
enum LogType {
  INFO
  WARNING
  ERROR
  SECURITY
>>>>>>> origin/main
}
