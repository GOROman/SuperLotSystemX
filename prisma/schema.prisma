// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ユーザー情報
model User {
  id           String    @id @default(uuid())
  twitterId    String    @unique // Twitter ID
  screenName   String    // Twitter スクリーンネーム
  profileImage String?   // プロフィール画像URL
  isFollower   Boolean   @default(false) // フォロワーかどうか
  followedAt   DateTime? // フォロー日時
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  entries      Entry[]   // 応募エントリーへの参照
  winners      Winner[]  // 当選情報への参照

  @@index([isFollower]) // フォロワー検索の最適化
}

// キャンペーンエントリー
model Entry {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  retweetId     String    // リツイートのID
  retweetedAt   DateTime  // リツイートした日時
  createdAt     DateTime  @default(now())
  isValid       Boolean   @default(true) // エントリーが有効かどうか
  invalidReason String?   // 無効な場合の理由

  @@unique([userId, retweetId]) // 重複エントリー防止
  @@index([isValid, createdAt]) // 有効なエントリーの検索最適化
}

// 当選情報
model Winner {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  giftCodeId  String    @unique
  giftCode    GiftCode  @relation(fields: [giftCodeId], references: [id])
  notifiedAt  DateTime? // 通知日時
  dmSentAt    DateTime? // DM送信日時
  dmMessageId String?   // DMのメッセージID
  createdAt   DateTime  @default(now())
  status      WinnerStatus @default(PENDING) // 当選処理のステータス
  notification NotificationQueue? // 通知キューへの参照

  @@index([status]) // ステータスによる検索最適化
}

// 当選ステータス
enum WinnerStatus {
  PENDING   // 通知待ち
  NOTIFIED  // 通知済み
  SENT      // DM送信済み
  FAILED    // 送信失敗
}

// 通知キュー
model NotificationQueue {
  id          String    @id @default(uuid())
  winnerId    String    @unique
  winner      Winner    @relation(fields: [winnerId], references: [id])
  giftCodeId  String    @unique
  giftCode    GiftCode  @relation(fields: [giftCodeId], references: [id])
  status      NotificationStatus @default(PENDING)
  messageId   String?   // 送信されたDMのID
  retryCount  Int       @default(0)
  lastError   String?   // 最後のエラーメッセージ
  lastRetryAt DateTime? // 最後の再試行日時
  sentAt      DateTime? // 送信完了日時
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status]) // ステータスによる検索最適化
}

// 通知ステータス
enum NotificationStatus {
  PENDING   // 送信待ち
  QUEUED    // キュー投入済み
  SENDING   // 送信中
  SENT      // 送信完了
  FAILED    // 送信失敗
  RETRYING  // 再試行中
}

// ギフトコード
model GiftCode {
  id            String    @id @default(uuid())
  code          String    @unique // ギフトコード（平文）
  encryptedCode String?   // 暗号化されたギフトコード
  amount        Int       // 金額
  isUsed        Boolean   @default(false) // 使用済みかどうか
  createdAt     DateTime  @default(now())
  usedAt        DateTime? // 使用日時
  expiresAt     DateTime? // 有効期限
  note          String?   // メモ
  winner        Winner?   // 当選者への参照
  notification  NotificationQueue? // 通知キューへの参照

  @@index([isUsed]) // 未使用コードの検索最適化
}

// システムログ
model SystemLog {
  id        String   @id @default(uuid())
  type      LogType  // ログタイプ
  message   String   // ログメッセージ
  metadata  Json?    // 追加のメタデータ
  createdAt DateTime @default(now())

  @@index([type, createdAt]) // ログの検索最適化
}

// ログタイプ
enum LogType {
  INFO
  WARNING
  ERROR
  SECURITY
}
